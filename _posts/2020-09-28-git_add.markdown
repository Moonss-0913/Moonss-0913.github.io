---
title:  "Git 익숙해 지기 2) Basics  (git add)"
layout: single
author_profile: true
date:   2020-09-27 15:40:20 +0530
author_profile: true
read_time: true
comments: true
share: true
related: true
popular: true
categories:
- git
toc: true
toc_sticky: true
toc_label: 목차
description: git 초기 설정 방법에 대한 글 
---

# **1\. Git의 Working flow** 

![출처 : https://velog.io/@lucasonestar/Git-work-flow-Fundamental-Command](/assets/images/post2/img1.jpg)

1.  **Working directory** 
    -   프로젝트 파일 수정 및 작업 하는 곳 
        1.  track : git이 이미 알고 있는 파일  
            1.  unmodified : 수정되지 않은 파일
            2.  modified : 수정 된 파일  
                -   modified 된 파일만 Staging area로 옮길 수 있다. 
        2.  untrack : 새로 만들어진 파일 
2.  **Staging area** 
    -   버전 히스토리에 저장 할 준비가 되어있는 파일들을 옮겨 놓는 곳  
3.  **Localrepp** 
    -   버전의 히스토리를 가지고 있는 곳 
4.  **Remote repo**
    -   github 서버에 업로드

각각의 프로젝트의 버전들 정보는 각각의 commit에는 스냅샷된 정보들을 기반으로 고유한 해시코드가 부과됨 

어떤 버전인지 버전 메세지 작성자 시간 등도 알 수 있다.

----

# 2\. 실습

## 2-1 ) git add 와 Staging area

이전 포스트에서 만든 git\_file 폴더에 a.txt, b.txt, c.txt를 만들어줌 

```
$ echo hello world! >> a.txt 
$ echo hello world! > b.txt 
$ echo hello world! > c.txt
$ git status
```

![](/assets/images/post2/img2.png)

> master brach에서 작업 하고 있다.
> commits 은 아직 없고 untracked files 목록을 보여주고 아직 commit 할게 없지만 git add로 track할 수  있다. 

```
$ git add a.txt #a.txt 만 add 
$ git add *.txt # txt파일 전부 add
$ git status
```

위 코드들을 사용해서 Staging area로 옮길 수 있다. 

![](/assets/images/post2/img3.png)

![출처 : https://www.youtube.com/watch?v=Z9dvM7qgN9s&t=356s](/assets/images/post2/img4.png)

Staging area로 파일을 올리고 수정을 하면

```
$ echo moonss >> a.txt 
$ git status
```
![](/assets/images/post2/img5.png)

파일이 총 4개가 확인 되고 수정된 a.txt를 확인할 수 있다. 위 세개는 commit 준비가 되어 있는걸 확인 할 수 있다. 

![](/assets/images/post2/img6.png)

```
$ git add a.txt #코드를 실행 하게 되면 모든 파일이 staging area에 들어가게 된다.  
$ git status
```

![](/assets/images/post2/img7.png)


```
$ git rm --cached *.txt # 모든 txt파일이 다시 working dir로 내려오게 된다. 
$ git status
```
![](/assets/images/post2/img8.png)

![](/assets/images/post2/img9.png)



## 2-2 ) git add \* 와 git add . 의 차이 

### git add \* 전체 파일 Staging area 올리기

```
$ git add * #전체 파일 add
```

![](/assets/images/post2/img10.png)

```
$ rm a.txt 
$ git add * 
$ git status
```
![](/assets/images/post2/img11.png)

### **git add . 전체 파일 Staging area 올리기**

```
$ rm a.txt 
$ git add .
$ git status
```

![](/assets/images/post2/img12.png)

## 2-3 ) gitignore

**git에 tracking 하고 싶지 않은 파일들 or github에 공개하고 싶지 않은 파일이 있을 때 사용** 

```
$ echo *.log > .gitignore 
$ ls -al
```

![](/assets/images/post2/img13.png)

\*.log (모든 로그파일을 비공개 한다.) 

.gitignore 파일이 생긴걸 확인 할 수 있다. 

```
$ git status
```

![](/assets/images/post2/img14.png)

log 파일은 안보이고 .gitignore 파일만 보이는걸 확인할 수 있다. 

.gitignore 파일안에 추가적으로 경로를 입력해서 안보이게 할 수도 있고 특정 파일 형태를 안보이게 할 수도 있다. 

참고 자료 : [https://www.youtube.com/watch?v=Z9dvM7qgN9s&t=356s](https://www.youtube.com/watch?v=Z9dvM7qgN9s&t=356s)
